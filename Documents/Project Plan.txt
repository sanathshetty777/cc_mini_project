Project - Serverless Function Execution Platform

Day 1: Project Setup & Core Infrastructure
Planning & Setup:

Define architecture and system design.

Initialize Git repository and set up CI/CD pipeline.

Install dependencies and create project folder structure.

Create a README with project goals.

Backend API Foundation:

Implement a basic API server (Express.js or FastAPI).

Define database schema for function storage (MySQL/PostgreSQL).

Implement function metadata storage (name, route, language, timeout).

Build CRUD endpoints for function management.

Checkpoint: API can store and retrieve function definitions.

Day 2: Virtualization & Execution Engine
Set up Docker as the first virtualization technology.

Create base container images for Python & JavaScript functions.

Implement function packaging mechanism.

Build a simple execution engine that runs a function inside a Docker container.

Implement timeout enforcement & request routing.

Checkpoint: Functions can be executed via API inside Docker.

Day 3: Second Virtualization & Metrics Collection
Set up the second virtualization technology (Firecracker/Nanos/gVisor).

Implement execution engine support for the second technology.

Compare performance of the two approaches.

Implement metrics collection (response time, errors, resource usage).

Set up storage & basic aggregation for metrics.

Checkpoint: System collects and stores execution metrics.

Day 4: Frontend Development & Dashboard
Set up frontend framework (Next.js, Streamlit, or similar).

Implement function deployment interface.

Create function management views (list, create, update, delete).

Implement metrics visualization components.

Create a dashboard for function performance & system-wide statistics.

Checkpoint: Users can deploy and monitor functions via UI.

Day 5: Integration & Polishing
Integrate frontend, backend, and execution engine.

Implement authentication/authorization (if feasible).

Conduct end-to-end testing.

Fix major bugs & optimize performance.

Checkpoint: Core system is fully functional.

Day 6: Optimization & Documentation
Implement auto-scaling (if time permits).

Support environment variables in functions.

Conduct a cost analysis comparing virtualization technologies.

Add support for additional programming languages (if possible).

Write documentation for system usage and deployment.

Checkpoint: System is complete with documentation.

Day 7: Buffer & Final Testing
Final bug fixes.

Performance tuning.

Validate scalability & reliability.

Prepare a short demo or presentation if needed.

Key Tips:
✅ Prioritize working MVP over perfection.
✅ Parallelize tasks (e.g., while working on backend, set up frontend scaffold).
✅ Use pre-built solutions (e.g., Firebase Auth for authentication, Grafana for monitoring).
✅ Keep logs & error handling simple but effective.